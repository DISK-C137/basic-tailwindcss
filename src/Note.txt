- กำหนดสีพื้นหลัง (Background) = bg-red-300

- การจัดการข้อความ (Typography)
    *สีข้อความ (Color) = text-red-300 ถึง 900

    *ขนาดข้อความ (Size) = Link: https://tailwindcss.com/docs/font-size

    *รูปแบบข้อความ (Style) = font-italic | uppercase | lowercase | capitalize

    *ความหนาข้อความ (Weight) = Link: https://tailwindcss.com/docs/font-weight

    *ตำแหน่งข้อความ (Alignment) = text-center | text-right | text-left

    *ความโปร่งใส (Opacity) = text-opacity-0 | text-opacity-50 ถึง 100

- ความกว้างและความสูง
    * w = กำหนดความกว้าง (width) link: https://tailwindcss.com/docs/width
    * h = กำหนดความสูง (height) link: https://tailwindcss.com/docs/height

- Margin คือ การกำหนดระยะห่างจากเส้นขอบด้านนอก
    * ทิศทางเดียว = m{t|r|b|l}-{size}
    * แนวนอน = mx-{size}
    * แนวตั้ง = my-{size}
    * ทุกทิศทาง = m-{size}

- Pading คือ กำหนดพื้นที่ระยะห่างภายในของ element (ช่องว่างด้านใน)
    * ทิศทางเดียว = p{t|r|b|l}-{size}
    * แนวนอน = px-{size}
    * แนวตั้ง = py-{size}
    * ทุกทิศทาง = p-{size}

- Border การจัดการเส้นขอบ
    * ขนาดเส้นขอบ Link: https://tailwindcss.com/docs/border-width
    * สีเส้นขอบ (Border Color) Link: https://tailwindcss.com/docs/border-color
    * ความโค้งเส้นขอบ (Border Radius) Link: https://tailwindcss.com/docs/border-radius
    * รูปแบบเส้นขอบ (Border Style) Link: https://tailwindcss.com/docs/border-style

- Box Shadow Link: https://tailwindcss.com/docs/box-shadow

- Pseudo Selector กำหนดรูปแบบการทำงานโดยอ้างอิงตามเงื่อนไขที่กำหนดใน Selector ที่เราสนใจ
    * focus:bg-green-200
    * hover:bg-blue-200

- Responsive Web Design
    * container = กล่องบรรจุ element
    * Breakpoint = จุดที่ทำให้เว็บเพจปรับขนาดตามอุปกรณ์ต่าง ๆ

- Flexbox คือ เครื่องมือใน css ที่ช่วยให้การจัดการ element ต่าง ๆ ในหน้าเว็บมีความง่ายและยืดหยุ่นมากยิ่งขึ้น
    * จัดเรียงตำแหน่งของ element ได้ง่ายขึ้น เรียงจากบนลงล่าง ซ้ายไปขวา อื่น ๆ
    * กำหนดขนาดให้พอดีกับพื้นที่ว่างแบบอัตโนมัติ (Sizing)
    ประกอบด้วย
    * container และ item (element)

- Flex Direction เป็นการกำหนดทิศทางของ element
    * row = วาง item ในแนวนอนทิศทางเดียวกันกับแกนหลัก
    * row-reverse = จัดวาง item ในแนวนอนทิศทางตรงข้ามกับแกนหลัก
    * column = จัดวาง item ในแนวตั้งทิศทางเดียวกับแกนหลัก
    * column-reverse = จัดวาง item ในแนวตั้งทิศทางตรงข้างกับแกนหลัก

- Flex Wrap ใช้ในกรณีที่ขนาด items ใหญ่กว่าพื้นที่ container
    * nowrap = จัดวาง items ที่เกินพื้นที่ container ไปด้านขวามือ
    * wrap = จัดวาง items ที่เกินพื้นที่ container เรียงจากบนลงล่าง
    * wrap-reverse = จัดวาง items ที่เกินพื้นที่ container เรียงจากล่างขึ้นบน

- Grow & Shrink
    * flex-1 = ทำให้ item ที่อยู่ในแถวเดียวกันมีขนาดเท่ากัน
    * shrink = ให้ item หดตัวขนาดเท่าใดเมื่อเทียบกับ item อื่น ๆ (ค่าเริ่มต้นเป็น 1)
    * grow = ให้ item ขยายตัวเท่าใดเมื่อเทียบกับ item อื่น ๆ (ค่าเริ่มต้นเป็น 0)

- Grid Layout = คือ Layout ที่ใช้ในการควบคุมและจัดสรรพื้นที่ให้วัตถุต่าง ๆ ในหน้าเว็บ โดยองค์ประกอบของ Grid จะมี 2 ส่วนได้แก่
    * Row (แถว)
    * Column (คอลัมน์)

- Gap คือ การกำหนดช่องว่างหรือระยะห่างระหว่าง items ที่ทำงานใน Flexbox หรือ Grid Layout ซึ่งสามารถกำหนดได้ทั้งรูปแบบแนวตั้งและแนวนอน
    * gap-size (กำหนดช่องว่างแนวตั้งและแนวนอน)
    * gap-x-size (กำหนดช่องว่างแนวนอน)
    * gap-y-size (กำหนดช่องว่างแนวตั้ง)

- Justify-Items = การจัดวางตำแหน่ง Item ทุกตัวที่อยู่ในแถว
    * start = ชิดซ้าย
    * center = ชิดขวา
    * end = ชิดขวา
    * stretch = ปรับขนาด item ทั้งหมดให้เต็มพื้นที่

- Justify-Self = จัดวางตำแหน่ง item ที่สนใจให้อยู่ในพื้นที่ ที่ต้องการ
    * start = ชิดซ้าย
    * center = ชิดขวา
    * end = ชิดขวา

- Layer & Apply
    (
        Tailwind Directives
        - @taliwind base; จัดการ element (tag)
        - @tailwind components; จัดการ class
        - @tailwind utilities; ปรับแต่ง class

        TailWind CSS คือ
        Utility-First CSS Framework เป็นการจัดการโดยตรงกับ Element ที่เป็น Class ย่อย ๆ และนำมาประกอบกันในภายหลัง และเพื่อความสะดวกในการใช้งาน class ย่อย ๆ ซ้ำกันใน TailWind CSS จะใช้คำสั่ง "@apply" เพื่อรวม class และ สร้าง class ใหม่ได้

        // ใช้ class ซ้ำกัน
        <a href="#" class="text-green-500">Menu 1</a>
        <a href="#" class="text-green-500">Menu 2</a>
        <a href="#" class="text-green-500">Menu 3</a>

        // ประกาศได้ในที่เดียว
        @layer base{
            a{
                @apply text-green-500
            }
        }

        * กำหนดกฏในไฟล์ input.css
    )

- Components
    (
        // ใช้ class ซ้ำกัน หลาย ๆ class
        <a href="#" class="text-white bg-red-500 p-3">Menu 1</a>
        <a href="#" class="text-white bg-red-500 p-3">Menu 2</a>
        <a href="#" class="text-white bg-red-500 p-3">Menu 3</a>

        // สามารถยุบรวม class มาเป็น class ใหม่ได้ (menu-button)
        <a href="#" class="menu-button">Menu 1</a>
        <a href="#" class="menu-button">Menu 2</a>
        <a href="#" class="menu-button">Menu 3</a>

        @layer components{
            .menu-button{
                @apply text-white bg-red-500 p-3
            }
        }

        * กำหนดกฏในไฟล์ input.css
    )

- utilities Class
    (
        // class เดิมก่อนปรับแต่ง
        <h1 class="text-red-500">Hello Sir!</h1>

        //ทำการปรับแต่ง
        @layer utilities{
            .text-red-500{
                color:blue; //ปรับให้เป็นสีน้ำเงิน
            }
        }
    )